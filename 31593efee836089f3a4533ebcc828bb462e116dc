{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "87685acb_46c8d6b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1012732
      },
      "writtenOn": "2020-12-18T20:42:59Z",
      "side": 1,
      "message": "instance",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 11,
        "endChar": 39
      },
      "revId": "31593efee836089f3a4533ebcc828bb462e116dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf43c97e_8c32c1e6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-12-22T00:36:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87685acb_46c8d6b8",
      "range": {
        "startLine": 11,
        "startChar": 32,
        "endLine": 11,
        "endChar": 39
      },
      "revId": "31593efee836089f3a4533ebcc828bb462e116dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "79a6c556_15969d2b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-12-19T01:19:09Z",
      "side": 1,
      "message": "I believe the problem is much bigger than we thought initially: after this change, it fails for other payloads.\n\nExample:\n  [2020-12-19 01:17:23,753] [HTTP-144] WARN  org.eclipse.jetty.server.HttpChannel : /plugins/high-availability/event/comment-added\ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected BEGIN_ARRAY but was BEGIN_OBJECT at path $\n\tat com.google.gson.Gson.fromJson(Gson.java:939)\n\tat com.google.gson.Gson.fromJson(Gson.java:994)\n\tat com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.deserialize(TreeTypeAdapter.java:162)\n\tat com.google.gerrit.server.events.SupplierDeserializer.deserialize(SupplierDeserializer.java:38)\n\tat com.google.gerrit.server.events.SupplierDeserializer.deserialize(SupplierDeserializer.java:27)\n\tat com.google.gson.internal.bind.TreeTypeAdapter.read(TreeTypeAdapter.java:69)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\n\tat com.google.gson.Gson.fromJson(Gson.java:927)",
      "revId": "31593efee836089f3a4533ebcc828bb462e116dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50be6acb_b8c7ad6c",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/HttpSession.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-12-19T01:24:03Z",
      "side": 1,
      "message": "We are changing the Json serialiser in one way (REST-Client to Server): are we 100% sure we are using the same on the other way as well?",
      "range": {
        "startLine": 38,
        "startChar": 16,
        "endLine": 38,
        "endChar": 35
      },
      "revId": "31593efee836089f3a4533ebcc828bb462e116dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3940b799_8c179d29",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/HttpSession.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2020-12-19T18:32:32Z",
      "side": 1,
      "message": "Yes it was wrong replacement on line 35:\n\n  private final Gson gson \u003d\n      new GsonBuilder().registerTypeAdapter(Supplier.class, new SupplierSerializer()).create();\n\nis not equivalent to:\n\n  this.gson \u003d gsonProvider.get();\n\nbecause now we are missing the supplier serializer registration and all suppliers are not correctly serialized and effectively empty. There are two possible fixes:\n\n* 1. Add supplier serializer in GsonProvider\n* 2. Don\u0027t use GsonProvider, but just extend the builder with now required ProjectNameKeyAdapter serieliazer\n\n  private final Gson gson \u003d\n      new GsonBuilder()\n          .registerTypeAdapter(Project.NameKey.class, new ProjectNameKeyAdapter())\n          .registerTypeAdapter(Supplier.class, new SupplierSerializer())\n          .create();\n\nI went with the first approach. Done.",
      "parentUuid": "50be6acb_b8c7ad6c",
      "range": {
        "startLine": 38,
        "startChar": 16,
        "endLine": 38,
        "endChar": 35
      },
      "revId": "31593efee836089f3a4533ebcc828bb462e116dc",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}