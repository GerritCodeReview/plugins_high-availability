{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3a50acf8_7c1a0003",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-04-25T19:56:45Z",
      "side": 1,
      "message": "I believe that would be useful in Gerrit as well, regardless of the use-case of the high-availability plugin.\n\nCould you contribute this to Gerrit backend?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 20
      },
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d60a339_4917e1ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-04-26T10:37:58Z",
      "side": 1,
      "message": "This endpoint is based on a simple change query: `-age:\u003cperiod\u003e` which can also be executed against Gerrit core, but then Gerrit core would provide a much larger response with all other change-data included. In addition, Gerrit core also performs visibility checks on the default change-query endpoint.\n\nI put this into the HA plugin because I thought this is a highly specialized endnpoint (condensed response, no visibility checks, no limit) for the HA plugin scenario.\n\nConsidering the given arguments what is your opinion?",
      "parentUuid": "3a50acf8_7c1a0003",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 20
      },
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73e45583_03249e50",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-04-26T11:13:42Z",
      "side": 1,
      "message": "\u003e This endpoint is based on a simple change query: `-age:\u003cperiod\u003e` which can also be executed against Gerrit core, but then Gerrit core would provide a much larger response with all other change-data included. In addition, Gerrit core also performs visibility checks on the default change-query endpoint.\n\nTrue, and the visibility checks can be a performance issue and source of misalignments between nodes indexes.\n\nHow would you protect this endpoint though? The returned payload also contains the project names which could be confidential.\n\n\u003e I put this into the HA plugin because I thought this is a highly specialized endnpoint (condensed response, no visibility checks, no limit) for the HA plugin scenario.\n\nSure, I did something similar also in the past for the reindexing, so it makes sense in this context. Thanks for clarifying.\n\n\u003e Considering the given arguments what is your opinion?\n\nI like this change, it is a quick and lightweight way to recover the index alignments from a temporary outage very quickly.",
      "parentUuid": "6d60a339_4917e1ff",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 20
      },
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e28993b_93d57ebe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-04-26T11:53:34Z",
      "side": 1,
      "message": "\u003e I like this change, it is a quick and lightweight way to recover the index alignments from a temporary outage very quickly.\n\nYes, and it already proved to be very useful in our HA setup in the past month with very low (unnoticeable) footprint.",
      "parentUuid": "73e45583_03249e50",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 10,
        "endChar": 20
      },
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "392916e8_ae9d8e90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-04-25T16:39:07Z",
      "side": 1,
      "message": "This looks like just a duplicate of Gerrit change queries: what is the added value compared to running a REST-API with a query?",
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5a880225_99c1e87b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1004034
      },
      "writtenOn": "2024-04-25T19:50:14Z",
      "side": 1,
      "message": "The main difference is that the standard change query returns a full `ChangeInfo` [1] per change which is a lot of data. This implementation only returns the changeids. This query is run frequently, hence I think it makes sense to add an optimized API.\n\nAs an experiment I ran a change query `age:2min` on our productive server, it returned 100 changes, response size was 3.3 MB, the list of 100 changeids in the response format used here had the size of 2.5kB which is a reduction by a factor of 1.3k.\n\n[1] https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-info",
      "parentUuid": "392916e8_ae9d8e90",
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd4e912b_51a115f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-04-26T11:14:25Z",
      "side": 1,
      "message": "Upgrading to a +1, but I am just concerned about the unrestricted visibility of project names in the payload.",
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce53486c_b6961b11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2024-04-26T11:50:52Z",
      "side": 1,
      "message": "In our setup the HA endpoints are protected by istio (configured form k8s-gerrit). However, I agree with you that we cannot leave this endpoint unprotected. Let me fix that.",
      "parentUuid": "cd4e912b_51a115f1",
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b89742a2_068fc4fa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2024-05-13T14:16:59Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "ce53486c_b6961b11",
      "revId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "a2d05e91090bdd0b54284df0a40397e729e665e2",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}