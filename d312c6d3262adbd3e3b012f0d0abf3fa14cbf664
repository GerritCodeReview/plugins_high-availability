{
  "comments": [
    {
      "key": {
        "uuid": "0acc571b_f013000c",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/AutoReindexListener.java",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "Usage of the default queue, which has thread pool size of just 1 (by default), for all reindexing tasks may not be the best option. At least this fact has to be documented.\nMaybe a better option is to use a dedicated thread pool.",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ab0d020_22916b97",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/AutoReindexListener.java",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "True, that would be better as well for identifying this thread pool specifically.\nThe pool size should be still 1, but better not to mess up the default queue with a potentially long-running auto-reindex task.",
      "parentUuid": "0acc571b_f013000c",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04fc5e22_44de0d05",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/GroupReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "This is just natural ordering of Timestamps. Why not use Guava\u0027s Ordering.natural() instead?",
      "range": {
        "startLine": 74,
        "startChar": 19,
        "endLine": 74,
        "endChar": 47
      },
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2ab5ca6_112d2fab",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/GroupReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "Guava documentation says:\nJava 8 users: use Comparator.naturalOrder() instead\n\nWill use that then.",
      "parentUuid": "04fc5e22_44de0d05",
      "range": {
        "startLine": 74,
        "startChar": 19,
        "endLine": 74,
        "endChar": 47
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca2d5bb0_7e6db56a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/GroupReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "IIRC, We usually declare such small utility classes as static inner classes.",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a78f31f5_4b090e95",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/GroupReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "This class is not needed anymore, will just get rid of it.",
      "parentUuid": "ca2d5bb0_7e6db56a",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41cea86c_a389ca3a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "use Guava\u0027s Stopwatch instead?",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5189baf9_4aa97886",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41cea86c_a389ca3a",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7818ba7b_fb1498b1",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "Why use nanos if rounding here to millis and seconds?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 83,
        "endChar": 55
      },
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e37692f_bd70af80",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ReindexRunnable.java",
        "patchSetId": 3
      },
      "lineNbr": 83,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "Because in my tests the elapsed time was often less then 1 msec and thus creating divisions by zero in the count / elapsed.",
      "parentUuid": "7818ba7b_fb1498b1",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 83,
        "endChar": 55
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31943bf3_a38c1a6c",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/IndexTs.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "Looking at lines 43-45 you already expect that multiple thread will access\nthese fields. However, this is true for the FlusherRunner instance created in line 76.\nTherefore, access to this Map is not thread safe.",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a0c5555_dc6c72b8",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/IndexTs.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "Nope, because this is Runnable is scheduled on single executor scheduler.",
      "parentUuid": "31943bf3_a38c1a6c",
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f0a1ba6_c6af21b3",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/IndexTs.java",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "This is locale setting specific. Use UTF8 explicitly.",
      "range": {
        "startLine": 62,
        "startChar": 62,
        "endLine": 62,
        "endChar": 72
      },
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cad7ab21_91703b0e",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/IndexTs.java",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-08-03T13:25:09Z",
      "side": 1,
      "message": "Is this thread safe and atomic? We don\u0027t want to created corrupted files in case of\na crash. What happens if multiple threads try to persist to the same file?\n\nI believe that you should use here a file level locking technique like JGit does for ref updates i.e.: to persist into a file Foo, first create Foo.lock, then persist into Foo.lock and\nfinally atomically rename Foo.lock into Foo.\nIIRC, JGit already provides support for this logic with its LockFile class.",
      "range": {
        "startLine": 62,
        "startChar": 10,
        "endLine": 62,
        "endChar": 21
      },
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f797758_0735aba2",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/IndexTs.java",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f0a1ba6_c6af21b3",
      "range": {
        "startLine": 62,
        "startChar": 62,
        "endLine": 62,
        "endChar": 72
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d161f15_d883a56c",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/IndexTs.java",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-08-13T21:54:19Z",
      "side": 1,
      "message": "This is executed in a single thread and then is safe.\nIn case of a crash, well, all of Gerrit has the same problem.\n\nWhen you crash on Gerrit you may:\n- corrupt the Lucene Index\n- corrupt the JGit repo\n\nThis small file is typically written in a single shot, so it would either be written or not, because the content is very very small.",
      "parentUuid": "cad7ab21_91703b0e",
      "range": {
        "startLine": 62,
        "startChar": 10,
        "endLine": 62,
        "endChar": 21
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "d312c6d3262adbd3e3b012f0d0abf3fa14cbf664",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}