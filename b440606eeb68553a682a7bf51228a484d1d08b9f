{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1e13058a_ce684f2c",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T09:48:38Z",
      "side": 1,
      "message": "*IF* json was not an JsonObject, it would have been returned as a string. Now, I believe it would raise an exception. Have you checked what is the consequence?",
      "range": {
        "startLine": 41,
        "startChar": 60,
        "endLine": 41,
        "endChar": 77
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4baa7a2_f342942a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T09:48:38Z",
      "side": 1,
      "message": "nit: import static Suppliers.memoize?",
      "range": {
        "startLine": 41,
        "startChar": 31,
        "endLine": 41,
        "endChar": 48
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6935131_d3527983",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-19T10:39:06Z",
      "side": 1,
      "message": "I checked Gerrit core code and couldn\u0027t find static imports of memoize. So I would prefer to keep the current import style.",
      "parentUuid": "b4baa7a2_f342942a",
      "range": {
        "startLine": 41,
        "startChar": 31,
        "endLine": 41,
        "endChar": 48
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2324ee55_25e15708",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-19T10:39:06Z",
      "side": 1,
      "message": "The check is still there but it is implicit. The getAsJsonObject is used only in the cases of ACCOUNTS, GROUPS, ... cases where we know that it must be a json object (this is also what you do in the multi-site plugin IIRC :-)\n\nThe lambda in this line will only be executed in the mentioned cases, not at the moment of the creation of the Supplier.",
      "parentUuid": "1e13058a_ce684f2c",
      "range": {
        "startLine": 41,
        "startChar": 60,
        "endLine": 41,
        "endChar": 77
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "877f73e3_f82d53b5",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-22T01:04:17Z",
      "side": 1,
      "message": "Sure, but that is different from what was happening before.\nThe return of json.getAsString() was made unconditionally if json was not an object, regardless of the cacheName.\n\nP.S. Not sure if that is a problem or not though, it could be 100% negligible.",
      "parentUuid": "2324ee55_25e15708",
      "range": {
        "startLine": 41,
        "startChar": 60,
        "endLine": 41,
        "endChar": 77
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e2ceb4f_214d1d48",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-22T01:04:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c6935131_d3527983",
      "range": {
        "startLine": 41,
        "startChar": 31,
        "endLine": 41,
        "endChar": 48
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33f789a1_59365a25",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-22T12:55:59Z",
      "side": 1,
      "message": "OK, I see what you mean. Playing a bit with the Gson library I would say that this is probably not worth \"fixing\". A fix would be done in the \"default:\" case of the switch statement and would look like this:\n\n        try {\n          if (!json.isJsonObject()) {\n            return json.getAsString();\n          }\n          return gson.fromJson(json, String.class);\n        } catch (Exception e) {\n          return gson.fromJson(json, Object.class);\n        }\n\nHowever, when json is an object then both json.getAsString() and gson.fromJson(json, String.class) will fail (throw an exception) and the \ncatch block handles all exceptions the same way.\n\nOTOH, when json is a string then both of these calls will return the same (String) value.\n\nSo this code could also look like:\n\n        try {\n          return json.getAsString();\n        } catch (Exception e) {\n          return gson.fromJson(json, Object.class);\n        }\n\nand the behavior would be the same as in the proposed code in this change.\n\nAnyway, the proposed \"fix\" doesn\u0027t seem to solve any real issue and will only serve as a constant puzzle to anyone having to deal with that code in the future. I would prefer to keep the code as proposed in this PS.\n\nWDYT?",
      "parentUuid": "877f73e3_f82d53b5",
      "range": {
        "startLine": 41,
        "startChar": 60,
        "endLine": 41,
        "endChar": 77
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f6c363_4bce4bc7",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-22T13:40:16Z",
      "side": 1,
      "message": "\u003e OK, I see what you mean. Playing a bit with the Gson library I would say that this is probably not worth \"fixing\". A fix would be done in the \"default:\" case of the switch statement and would look like this:\n\u003e \n\u003e         try {\n\u003e           if (!json.isJsonObject()) {\n\u003e             return json.getAsString();\n\u003e           }\n\u003e           return gson.fromJson(json, String.class);\n\u003e         } catch (Exception e) {\n\u003e           return gson.fromJson(json, Object.class);\n\u003e         }\n\u003e \n\u003e However, when json is an object then both json.getAsString() and gson.fromJson(json, String.class) will fail (throw an exception) and the \n\u003e catch block handles all exceptions the same way.\n\u003e \n\u003e OTOH, when json is a string then both of these calls will return the same (String) value.\n\u003e \n\u003e So this code could also look like:\n\u003e \n\u003e         try {\n\u003e           return json.getAsString();\n\u003e         } catch (Exception e) {\n\u003e           return gson.fromJson(json, Object.class);\n\u003e         }\n\u003e \n\u003e and the behavior would be the same as in the proposed code in this change.\n\u003e \n\u003e Anyway, the proposed \"fix\" doesn\u0027t seem to solve any real issue and will only serve as a constant puzzle to anyone having to deal with that code in the future. I would prefer to keep the code as proposed in this PS.\n\u003e \n\u003e WDYT?\n\nTrue, this code is messy anyway so it should be put to an order sooner or later. Would it be worth possibly to merge my Cache functional tests first and then adding more coverage to the other caches as well? So that we do know we\u0027re not breaking anything.",
      "parentUuid": "33f789a1_59365a25",
      "range": {
        "startLine": 41,
        "startChar": 60,
        "endLine": 41,
        "endChar": 77
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b738c07a_d4771cce",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 41,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-22T13:49:51Z",
      "side": 1,
      "message": "I don\u0027t find any open changes from you in the HA plugin",
      "parentUuid": "80f6c363_4bce4bc7",
      "range": {
        "startLine": 41,
        "startChar": 60,
        "endLine": 41,
        "endChar": 77
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b34511fe_ca0075e0",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2021-03-19T09:48:38Z",
      "side": 1,
      "message": "Unrelated: this is yet another big smell !!! So, we do not have any idea on why the JSON exception failed, however, we move on and we don\u0027t log anything but just pretend to evict whatever comes out from that object hoping for the best?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 9
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8c1ba63_add2f3ec",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/CacheKeyJsonParser.java",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2021-03-19T10:39:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b34511fe_ca0075e0",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 9
      },
      "revId": "b440606eeb68553a682a7bf51228a484d1d08b9f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}