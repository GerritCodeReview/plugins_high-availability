{
  "comments": [
    {
      "key": {
        "uuid": "f416e06c_5c35639a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/AccountReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-02-21T15:10:29Z",
      "side": 1,
      "message": "Account creation is only one of the many causes of account being reindexed. This will definitely not reindex all the account that were modified while the node was down.\n\nI do not have anything to propose here though. That\u0027s why I said that we considered the approach you are trying to do in this change but we ruled it out because it was just not working for all the cases.\n\nHigh-availability plugin must be rock solid, this is not a best effort thing. I do not want to add a feature that will give a false impression to the administrators that you can rely on autoIndexAtStartup if it\u0027s not 100% functional.",
      "range": {
        "startLine": 52,
        "startChar": 6,
        "endLine": 52,
        "endChar": 48
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd3374d1_5cc9db51",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/AccountReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 52,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-02-21T16:29:11Z",
      "side": 1,
      "message": "The \"many causes\" are not that many after all.\nAn account table stores the following information\n- full name\n- preferred email\n- inactive\n- status\n\nMost of the people are using this in-sync with LDAP, so Gerrit is just a cached copy of that information.\n\nHow often are full name and preferred email changes?\nHow often you disable accounts?\nStatus ... that may be out of sync but it is not a critical issue IMHO.\n\nYes, registeredOn is the only TS we have on the accounts table.\nLet\u0027s see what would be the cases where this is a problem.\n\nYou should have at the same time:\n\n1. Network slowdown between the two nodes for a long time but *less* than 1h (for your case)\n2. The failover node going down *exactly* the events were sent through\n3. An account getting disabled exactly in that timeframe on the active node\n4. Someone changing their status or being disabled *exactly*  in that timeframe\n\nYes, it may happen. We can include an option to say \"full reindex accounts if you see something strange\" and that would cover when 1. 2. 3. and 4. happen at the same time.\n\nThe full reindex of accounts is not very expensive like a full changes reindex after all.\n\nHow does it sound?",
      "parentUuid": "f416e06c_5c35639a",
      "range": {
        "startLine": 52,
        "startChar": 6,
        "endLine": 52,
        "endChar": 48
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1f91dfd_4b6bc497",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ChangeReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-02-21T15:10:29Z",
      "side": 1,
      "message": "As I mentioned before, we do not have a solution for deleted change and I do not see and an easy one.\n\nWe need to be able to cover all the cases otherwise this feature is not working. If we cannot cover all the cases, the administrators that want high-availability only have one option, use a combination of http.maxRetries and http.retryInterval that give them a period of time that the node can be down without losing events. If node is down for longer, they need to realing the secondary indexes manually before rejoining the node in the cluster.",
      "range": {
        "startLine": 45,
        "startChar": 11,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91cb98c7_a539e97a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ChangeReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-02-21T15:10:29Z",
      "side": 1,
      "message": "Won\u0027t this fetch a really big amount of data? FYI, we have 3.5 million changes.",
      "range": {
        "startLine": 45,
        "startChar": 11,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c625e4d9_d9a44b4d",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ChangeReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-02-21T16:34:03Z",
      "side": 1,
      "message": "Delete changes: you can actually detect them as \"gaps\" in the sequence numbering.\n\nWe can get the \"latest sequence\" that exists in ReviewDb and the lowest sequence of the changes that are potentially out of sync. Any gaps between them are the deleted ones and we can safely remove them from the Lucene Index.",
      "parentUuid": "f1f91dfd_4b6bc497",
      "range": {
        "startLine": 45,
        "startChar": 11,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13734665_97de1bca",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ChangeReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-02-21T16:34:03Z",
      "side": 1,
      "message": "Point taken. Let\u0027s introduce a where clause and, if the SQL query gets slow, we can always add a secondary index to it.",
      "parentUuid": "91cb98c7_a539e97a",
      "range": {
        "startLine": 45,
        "startChar": 11,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea36d608_16f2c69e",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/ChangeReindexRunnable.java",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2018-02-22T08:03:46Z",
      "side": 1,
      "message": "Just completed some tests on GerritHub.io, we have 400k changes:\n- the pure scanning with nothing to index: 400 msec (1usec per change)\n- scanning with 100 changes to reindex: 1600 msec (62 changes/sec)\n\nThe overhead in your case, with 3.2M changes would be 3.2s every hour.\nI am sure we can improve the performance, but for GerritHub.io is already \"good enough\" to go live.",
      "parentUuid": "13734665_97de1bca",
      "range": {
        "startLine": 45,
        "startChar": 11,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "712f8515a86e3aa6d727a7ade327a61859626be6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}