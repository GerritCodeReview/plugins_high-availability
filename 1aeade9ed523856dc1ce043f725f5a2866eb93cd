{
  "comments": [
    {
      "key": {
        "uuid": "650bce65_51fcda6a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1019328
      },
      "writtenOn": "2018-03-01T13:12:51Z",
      "side": 1,
      "message": "I\u0027m new to this object (thanks Ben for pointing to this option) and I wonder if there is any benefit of using the lazy weak alternative constructor in this case.",
      "range": {
        "startLine": 59,
        "startChar": 27,
        "endLine": 59,
        "endChar": 35
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27f762d5_a41afc5a",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-03-01T14:19:34Z",
      "side": 1,
      "message": "First, I want to say I really like how much simpler/nicer is the code.\n\nIds can be account, groups or changes. If I understand correctly, each different id will have it\u0027s own lock and this lock will never be removed until Striped itself is reclaimable which only happens when you unload the plugin in this case.\n\nLet\u0027s say that the plugin stays up for a few weeks, this means for us possibly:\n\n25000 accounts lock + 1000 groups lock + (30 days * 25 000 changes locks) \u003d 776 000 locks in memory.\n\nShould we be concerned by having so many lock in memory?\n\nThe previous implementation was removing the locks once no longer needed.",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 94,
        "endChar": 7
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af2986a7_d110d767",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-01T15:49:59Z",
      "side": 1,
      "message": "\u003e The previous implementation was removing the locks once no longer\n \u003e needed.\n\nWhat do you refer to by \"previous implementation\"? The base version (without guava) or the version with guava cache?\n\nAFAIU we have three versions of code to compare:\n1 base version\n2 version with guava Cache\n3 version with guava Striped\n\nIIUC, your computations refer to the version 3.\nThe version 2 uses guava cache and is not prone to ever growing\nnumber of in-memory locks.\n\nBen points to other possible issues with using guava cache for this purpose but also points that we\ncould use weakValues option to mitigate these risks, IIUC.\n\nFurther, the guava cache is oversized (1024 entries) and, as discussed in PS-2, having 1024 concurrent indexing tasks is unrealistic. We don\u0027t even have 1024 threads available. Therefore, the risk of a lock being removed while in use is probably inexistent.\n\nBen please correct me if I am wrong.",
      "parentUuid": "27f762d5_a41afc5a",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 94,
        "endChar": 7
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16bea048_99377705",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-03-01T16:50:59Z",
      "side": 1,
      "message": "\u003e \u003e The previous implementation was removing the locks once no longer\n \u003e \u003e needed.\n \u003e \n \u003e What do you refer to by \"previous implementation\"? The base version\n \u003e (without guava) or the version with guava cache?\n\n\nI was referring to the ugly code in the base version (without guava) :)\n\n\n\u003e Ben points to other possible issues with using guava cache for this\n\u003e purpose but also points that we\n\u003e could use weakValues option to mitigate these risks, IIUC.\n\n\nI am really not a big fan of weak references. They do not work well with large heap(e.g. 256GB). Before, JGit repository cache was based on weak references and the problem is weak references are collected too late in large heap. Because the heap is large, they are not collected until the heap is almost full and by that time, JVM gc is struggling big time making Gerrit unusable. I removed usage of weak references every where I could and we had to set -XX:SoftRefLRUPolicyMSPerMB\u003d0 because we use libraries such as Lucece which use them. That option force the gc to collected them as soon as not used.",
      "parentUuid": "af2986a7_d110d767",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 94,
        "endChar": 7
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e1fb67f_44d78568",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 1060013
      },
      "writtenOn": "2018-03-01T16:52:05Z",
      "side": 1,
      "message": "Since code ages poorly, I prefer to base correctness on assumptions, like that the cache won\u0027t evict due to the size being large enough. Others might naively copy the code or shrink the size. If changing from LRU (Guava) to another policy (Caffeine), a recently added entry may be evicted first. This can occur as frequency tends to offer a higher hit rate, and most entries are one-hit pollutants. So the assumptions in code may not always be clear and fail in a quietly (and harmful) manner.\n\nLock striping is a common technique. A fixed size stripe is an locks[] array, selecting the lock as locks[key % locks.length]. This can result in collisions, but this is usually benign if a decent size with a good hashing function. The number of allocations is fixed.\n\nDynamic striping uses a weak valued hash table to collect unused locks (no strong references). This can avoid collisions as every key is unique. However, it adds more recycling churn and rarely offers a performance benefit. Usually there is a more intelligent alternative if there is a performance problem.\n\nWhen I introduced the author of Striped these techniques, and my code implementing them, I had written a dynamic stripe merely for fun (as I only used a fixed striping).",
      "parentUuid": "af2986a7_d110d767",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 94,
        "endChar": 7
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d30ca24_ce2ac08d",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 1003873
      },
      "writtenOn": "2018-03-01T17:46:17Z",
      "side": 1,
      "message": "\u003e Lock striping is a common technique. A fixed size stripe is an locks[] array, selecting the lock as locks[key % locks.length]. This can result in collisions, but this is usually benign if a decent size with a good hashing function. The number of allocations is fixed.\n\nI believe that now I understood lock striping. Thanks!\n\nBased on the above explanation I think we should be fine with a fixed length locks array.\nIn the worst case two unrelated IDs may produce the same hash code and therefore use\nthe same lock. But this should happen rarely and is not dangerous.\n\n+1 for lock striping.",
      "parentUuid": "8e1fb67f_44d78568",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 94,
        "endChar": 7
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eea08f6_f3ba3b28",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-03-01T18:43:16Z",
      "side": 1,
      "message": "Thanks for the explanation, I also believe I understand how it works now.",
      "parentUuid": "3d30ca24_ce2ac08d",
      "range": {
        "startLine": 88,
        "startChar": 6,
        "endLine": 94,
        "endChar": 7
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba47c80e_e8a427d3",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-03-01T14:19:34Z",
      "side": 1,
      "message": "I do not think we need a private method anymore, simply call idLocks.get(id) at line 88",
      "range": {
        "startLine": 108,
        "startChar": 2,
        "endLine": 110,
        "endChar": 3
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78e8287c_acda2593",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/AbstractIndexRestApiServlet.java",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1012987
      },
      "writtenOn": "2018-03-01T18:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba47c80e_e8a427d3",
      "range": {
        "startLine": 108,
        "startChar": 2,
        "endLine": 110,
        "endChar": 3
      },
      "revId": "1aeade9ed523856dc1ce043f725f5a2866eb93cd",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}