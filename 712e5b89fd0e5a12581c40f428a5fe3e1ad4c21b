{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7c7ad2b3_e318c147",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/Forwarder.java",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-11-10T14:01:12Z",
      "side": 1,
      "message": "Documentation does not match method signature anymore",
      "range": {
        "startLine": 28,
        "startChar": 5,
        "endLine": 28,
        "endChar": 49
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75cee439_d2849868",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-11-10T14:01:12Z",
      "side": 1,
      "message": "2020",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "332db74f_c58655ed",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-11-10T14:01:12Z",
      "side": 1,
      "message": "This is going to execute tryToComplete() over and over again until the future is complete, correct?\nWhat are the termination guarantees? is this guaranteed to stop executing indefinitely because the REST request eventually will timeout?",
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26ad4766_da360525",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 91,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-11-10T14:01:12Z",
      "side": 1,
      "message": "The retryExecutor is initialised in the constructor.\nIt can\u0027t ever be null, can it?",
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dcbcf66_7e485eae",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-11-10T14:06:05Z",
      "side": 1,
      "message": "I was trying with similar approach, I was even looking at Retrier which we are already using in the Gerrit Core.\nI can see few point to discuss with this approach:\n1. This is basically recursion, each failing thread creates a new thread. If one of the remotes is not responding and we have a lot of changes happening we can run out of threads. Original code was taking a single thread per change and it was retrying without consuming any additional resources. I\u0027ve manage to reproduce it by adding a breakpoint on receiver site\n2. nit: We are creating additional work queue for RestForwarderScheduler\n3. nit: change 285925 introduce locking on the forwarder side, this approach is not release a lock between retry which is a code smell\n\nChange https://gerrit-review.googlesource.com/c/plugins/high-availability/+/286700 is so invasive because it is closing all thread and releasing all locks",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 111,
        "endChar": 3
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb151fbe_2c02e2a4",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-11-10T14:18:23Z",
      "side": 1,
      "message": "Plus I see weird behaviour now I have 39 forwarder thread for a single change(I reproduced the issue from above) If I add new event(vote on a change) I see three events so three threads but only one is retrying and it\u0027s retrying just once.",
      "parentUuid": "5dcbcf66_7e485eae",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 111,
        "endChar": 3
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae305a0f_48374c4b",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2020-11-10T14:34:52Z",
      "side": 1,
      "message": "1. Not really: it reschedules the task asynchronously and goes back in the executor\u0027s queue. Also, the number of retries is bound.\n2. Yes, I know.\n3. Each try should lock and then unlock. Between retries we should not lock.\n\nWith regards to the threads, because the executor is a thread pool with fixed number of executors, there isn\u0027t a 1:1 change/thread association. How did you manage to get 39 threads?",
      "parentUuid": "bb151fbe_2c02e2a4",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 111,
        "endChar": 3
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bd54660_98dd0a2d",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderScheduler.java",
        "patchSetId": 5
      },
      "lineNbr": 111,
      "author": {
        "id": 1083454
      },
      "writtenOn": "2020-11-10T16:59:47Z",
      "side": 1,
      "message": "\u003e With regards to the threads, because the executor is a thread pool with fixed number of executors, there isn\u0027t a 1:1 change/thread association. How did you manage to get 39 threads?\nI have local setup with two instances. I\u0027ve put a break point in com.ericsson.gerrit.plugins.highavailability.forwarder.ForwardedIndexingHandler.index(receiver side) and I\u0027ve started voting on the UI\n\n\u003e 3. Each try should lock and then unlock. Between retries we should not lock.\nBut lock is done in com.ericsson.gerrit.plugins.highavailability.index.IndexEventHandler.IndexTask.run so in this case it will not release the lock. To allow that we have to move locking to RestForwarderScheduler but in IndexEventHandler we also have queueTasks set which should be modified after we acquire the lock ðŸ˜ž That was one of the reasons I decided to not reschedule in RestForwarder",
      "parentUuid": "ae305a0f_48374c4b",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 111,
        "endChar": 3
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9451fec_3e5c7b0c",
        "filename": "src/test/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarderTest.java",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2020-11-10T14:01:12Z",
      "side": 1,
      "message": "Suggestion: What do you think about having a (set of) tests where more that one peer is provided.\nThis way we could test the reduce logic introduced at src/main/java/com/ericsson/gerrit/plugins/highavailability/forwarder/rest/RestForwarder.javaL153\n\nWDYT?",
      "range": {
        "startLine": 107,
        "startChar": 0,
        "endLine": 107,
        "endChar": 73
      },
      "revId": "712e5b89fd0e5a12581c40f428a5fe3e1ad4c21b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}