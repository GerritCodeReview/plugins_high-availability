{
  "comments": [
    {
      "key": {
        "uuid": "c2eb6dc8_5607daad",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-02-13T21:48:27Z",
      "side": 1,
      "message": "deleted",
      "range": {
        "startLine": 9,
        "startChar": 4,
        "endLine": 9,
        "endChar": 11
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c56d5f1_a5bf511d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-02-13T21:48:27Z",
      "side": 1,
      "message": "changes",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 18
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e82b329a_f19d2963",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-02-13T22:10:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2eb6dc8_5607daad",
      "range": {
        "startLine": 9,
        "startChar": 4,
        "endLine": 9,
        "endChar": 11
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32d2cda8_e031b65f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-02-13T22:10:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c56d5f1_a5bf511d",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 18
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "641e6d3a_7dcac2c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-02-13T22:10:41Z",
      "side": 1,
      "message": "dispatch",
      "range": {
        "startLine": 11,
        "startChar": 59,
        "endLine": 11,
        "endChar": 67
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "593c636f_f702a6c7",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-02-13T21:48:27Z",
      "side": 1,
      "message": "Based on the flag, the method body is completely different, best to split into two more focused methods:\n\n1. deleteChangeFromIndex (always synchronous)\n2. reindexChangeTaskAsync (always asynchronous)",
      "range": {
        "startLine": 101,
        "startChar": 10,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e1fa77e_4f22210c",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-02-13T22:10:41Z",
      "side": 1,
      "message": "But we are on the publisher side, so why sent the requests for those different kinds of change index event differently (sync vs. async)?",
      "parentUuid": "593c636f_f702a6c7",
      "range": {
        "startLine": 101,
        "startChar": 10,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1602bffa_173b6757",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-02-13T22:13:17Z",
      "side": 1,
      "message": "Right, remove my sync-vs-async comment: on the sender side we are *always* async for not blocking the Gerrit operation in progress. Point taken.",
      "parentUuid": "7e1fa77e_4f22210c",
      "range": {
        "startLine": 101,
        "startChar": 10,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f47722bd_4c58fbbe",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-02-13T22:36:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1602bffa_173b6757",
      "range": {
        "startLine": 101,
        "startChar": 10,
        "endLine": 101,
        "endChar": 17
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d5d3ffa_822b4ac6",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2019-02-13T18:50:26Z",
      "side": 1,
      "message": "Might be worth adding a test for this",
      "range": {
        "startLine": 101,
        "startChar": 5,
        "endLine": 108,
        "endChar": 14
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9cf502_5fbccc75",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-02-13T21:48:27Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "6d5d3ffa_822b4ac6",
      "range": {
        "startLine": 101,
        "startChar": 5,
        "endLine": 108,
        "endChar": 14
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57c60c68_8d2f79c8",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1011323
      },
      "writtenOn": "2019-02-13T22:49:33Z",
      "side": 1,
      "message": "It is a test for that in the code base. However, the that\u0027s where mocked tests are fail to detect real breakages:\n\n  when(changeCheckerMock.newIndexEvent()).thenReturn(Optional.of(new IndexEvent()));\n\nBy saying this in set up in IndexEventHandlerTest#setUpMocks() it missed the breakage, because in case of change deletion, ChangeCheckerImpl#newIndexEvent() returning empty Optional, and the whole event is dropped.\n\nSometimes only the complete integration tests are required.",
      "parentUuid": "bc9cf502_5fbccc75",
      "range": {
        "startLine": 101,
        "startChar": 5,
        "endLine": 108,
        "endChar": 14
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd851827_179c2bc5",
        "filename": "src/main/java/com/ericsson/gerrit/plugins/highavailability/index/IndexEventHandler.java",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2019-02-13T22:57:03Z",
      "side": 1,
      "message": "\u003e It is a test for that in the code base. However, the that\u0027s where mocked tests are fail to detect real breakages:\n\u003e \n\u003e   when(changeCheckerMock.newIndexEvent()).thenReturn(Optional.of(new IndexEvent()));\n\u003e \n\u003e By saying this in set up in IndexEventHandlerTest#setUpMocks() it missed the breakage, because in case of change deletion, ChangeCheckerImpl#newIndexEvent() returning empty Optional, and the whole event is dropped.\n\nSo, we should mock as well a situation where:\n\n   when(changeCheckerMock.newIndexEvent()).thenReturn(Optional.empty())\n\n\u003e Sometimes only the complete integration tests are required.\n\n*Holy words* :-)",
      "parentUuid": "57c60c68_8d2f79c8",
      "range": {
        "startLine": 101,
        "startChar": 5,
        "endLine": 108,
        "endChar": 14
      },
      "revId": "0eb4ecaf296cb833dde7e4e7177bb3fd3c095634",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}